# 排序算法
def 冒泡排序(目标数组):
    for 索引一 in range(len(目标数组), 0, -1):
        标记 = False
        for 索引二 in range(0, 索引一 - 1):
            if 目标数组[索引二] > 目标数组[索引二+1]:
                目标数组[索引二], 目标数组[索引二+1] = 目标数组[索引二+1], 目标数组[索引二]
        if 标记:
            break
    return 目标数组


def 希尔排序(目标数组):
    步长 = len(目标数组)
    while 步长 > 0:
        步长 //= 2
        for 甲 in range(步长, len(目标数组)):
            replace = 目标数组[甲]
            乙 = 甲
            while 乙 >= 步长 and replace < 目标数组[乙-步长]:
                目标数组[乙] = 目标数组[乙-步长]
                乙 -= 步长
            目标数组[乙] = replace
    return 目标数组


def 冒泡排序(目标数组):
    for 甲 in range(len(目标数组), 0, -1):
        标记 = False
        for 乙 in range(0, 甲 - 1):
            if 目标数组[乙] > 目标数组[乙+1]:
                目标数组[乙], 目标数组[乙+1] = 目标数组[乙+1], 目标数组[乙]
        if 标记:
            break
    return 目标数组


def 快速排序(目标数组):

    def _快速排序(目标数组, 左指针, 右指针):
        枢轴 = 目标数组[左指针]
        原左指针 = 左指针
        原右指针 = 右指针
        左指针空标记 = 0  # 左指针 po整数er null
        while 左指针 != 右指针:
            if 左指针空标记:
                if (目标数组[左指针] >= 枢轴):
                    目标数组[右指针] = 目标数组[左指针]
                    左指针空标记 = 0
                else:
                    左指针 += 1
            else:
                if (目标数组[右指针] < 枢轴):
                    目标数组[左指针] = 目标数组[右指针]
                    左指针空标记 = 1
                else:
                    右指针 -= 1
        中指针 = 左指针
        目标数组[中指针] = 枢轴
        if 原左指针 < 中指针 - 1:
            _快速排序(目标数组, 原左指针, 中指针 - 1)
        if 中指针+1 < 原右指针:
            _快速排序(目标数组, 中指针+1, 原右指针)

    左指针 = 0
    右指针 = len(目标数组) - 1
    _快速排序(目标数组, 左指针, 右指针)
    return 目标数组


def 选择排序(目标数组):
    for 甲 in range(len(目标数组)):
        最小数值 = 甲
        for 乙 in range(甲, len(目标数组)):
            if 目标数组[乙] < 目标数组[最小数值]:
                最小数值 = 乙
        目标数组[甲], 目标数组[最小数值] = 目标数组[最小数值], 目标数组[甲]
    return 目标数组


import random
from copy import deepcopy
数据集 = [random.randint(0, 100) for _ in range(20)]
print("     原数据:", 数据集)
print("   希尔排序:", 希尔排序(deepcopy(数据集)))
print("   冒泡排序:", 冒泡排序(deepcopy(数据集)))
print("   快速排序:", 快速排序(deepcopy(数据集)))
print("   选择排序:", 选择排序(deepcopy(数据集)))